{"version":3,"sources":["common/Flex.jsx","components/CurrentWeather/CurrentWeatherLoader.jsx","components/CurrentWeather/Styles.js","assets/icons/thermometer.svg","assets/icons/wind.svg","assets/icons/witness.svg","components/CurrentWeather/CurrentWeather.jsx","redux/actions/dailyWeather.js","redux/actionCreators/dailyWeather.js","components/DailyForecast/DayForecast/Styles.js","components/DailyForecast/DayForecast/DayForecast.jsx","components/DailyForecast/DayForecast/DayForecastLoader.jsx","components/DailyForecast/Styles.js","components/DailyForecast/DailyForecast.jsx","components/HourlyForecast/Styles.js","components/HourlyForecast/Chart/Chart.jsx","common/convertTime.js","components/HourlyForecast/HourForecast/Styles.js","assets/icons/humidity.svg","components/HourlyForecast/HourForecast/HourForecast.jsx","components/Details/Styles.js","components/Details/Details.jsx","common/Loader/Loader.jsx","components/HourlyForecast/HourlyForecast.jsx","redux/actions/position.js","redux/actions/currentWeather.js","redux/actionCreators/currentWeather.js","services/api.js","redux/actions/hourlyWeather.js","components/Search/Styles.js","assets/icons/search.svg","components/Search/Search.jsx","redux/actions/search.js","assets/images/background.jpg","appStyle.js","App.js","globalStyle.js","redux/sagas/currentWeatherSaga.js","redux/sagas/dailyWeatherSaga.js","redux/sagas/index.js","redux/reducers/currentWeather.js","redux/reducers/position.js","redux/reducers/dailyWeather.js","redux/reducers/hourlyWeather.js","redux/reducers/search.js","redux/store.js","index.js"],"names":["StyledFlex","styled","div","props","direction","align","justify","Flex","CurrentWeatherLoader","speed","width","height","viewBox","backgroundColor","foregroundColor","x","y","rx","ry","StyledCurrentWeather","StyledLocation","p","StyledTemperature","StyledWeatherIcon","img","StyledDescription","CurrentWeatherDetails","FeelsLike","icon","Wind","Visibility","CurrentWeather","useSelector","currentWeather","country","city","description","feelsLike","temperature","visibility","wind","isLoaded","src","alt","Math","round","feelsLikeIcon","windIcon","visibilityIcon","actions","getDailyWeatherRequest","payload","type","getDailyWeatherSuccess","getDailyWeatherError","setCoordsBySearch","StyledDayForecast","StyledDate","StyledImage","DayForecast","active","date","maxTemp","minTemp","onDayClick","className","onClick","DayForecastLoader","style","flex","StyledDailyForecast","StyledTitle","h2","StyledWrapper","DailyForecast","memo","dispatch","useDispatch","onDayClickHandler","day","_event","Date","dt","toDateString","days","dailyWeather","activeDay","latBySearch","coords","lat","lonBySearch","lon","useEffect","slice","map","isActive","split","weather","ceil","temp","max","floor","min","Array","fill","StyledHourlyForecast","StyledButtons","StyledButton","button","StyledForecastLine","StyledSubtitle","GraphWrapper","Chart","defaults","color","font","family","weight","data","labels","hour","time","scaleFontColor","datasets","label","borderColor","options","defaultFontColor","maintainAspectRatio","convertTime","ts","toTimeString","substring","StyledHourForecast","StyledPrecipitation","StyledWind","StyledTime","HourForecast","precipitation","humidityIcon","StyledDetails","StyledSun","StyledMoon","StyledWeatherPeriod","backgroundUrl","StyledSunrise","StyledSunset","StyledMoonrise","StyledMoonset","Details","filter","sunset","sunrise","moonset","moonrise","Loader","HourlyForecast","state","hourlyWeather","currentDayHourlyForecast","hours","useState","activeButton","setActiveButton","length","main","humidity","setPosition","location","getCurrentWeatherRequest","getCurrentWeatherSuccess","axiosInstance","axios","create","baseURL","API","getCurrentWeather","get","then","response","catch","getDailyWeather","getHourlyWeather","setLoad","setHourlyWeather","StyledSearch","input","StyledSearchWrapper","StyledErrorMessage","Search","searchRef","useRef","searchValue","setSearchValue","error","onSubmit","event","preventDefault","searchCity","trim","onSubmitHandler","ref","search","onChange","current","value","placeholder","Wrapper","background","Container","App","position","shallowEqual","navigator","geolocation","getCurrentPosition","latitude","longitude","getWeatherBySearch","GlobalStyle","createGlobalStyle","normalize","watchGetCurrentWeather","doGetCurrentWeather","takeLatest","fetchCurrentWeather","action","call","put","coord","message","watchGetDailyWeather","doGetDailyWeather","fetchDailyWeather","rootSaga","all","initialState","sys","name","feels_like","Position","DailyWeather","daily","HourlyWeather","list","reducers","combineReducers","sagaMiddleware","createSagaMiddleware","middleware","ReduxThunk","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e70600f.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledFlex = styled.div`\r\n  display: flex;\r\n  flex-direction: ${(props) => props.direction || 'row'};\r\n  align-items: ${(props) => props.align || 'stretch'};\r\n  justify-content: ${(props) => props.justify || 'stretch'};\r\n  margin: 0px;\r\n`\r\n\r\nfunction Flex(props) {\r\n  return <StyledFlex {...props} />\r\n}\r\n\r\nexport default Flex\r\n","import React from 'react'\r\nimport ContentLoader from 'react-content-loader'\r\n\r\nconst CurrentWeatherLoader = (props) => (\r\n  <ContentLoader\r\n    speed={2}\r\n    width={270}\r\n    height={187}\r\n    viewBox='0 0 270 187'\r\n    backgroundColor='rgba(255, 255, 255, 0.2)'\r\n    foregroundColor='rgba(255, 255, 255, 0.4)'\r\n    {...props}>\r\n    <rect x='35' y='2' rx='10' ry='10' width='110' height='20' />\r\n    <rect x='155' y='2' rx='10' ry='10' width='60' height='20' />\r\n    <rect x='10' y='40' rx='10' ry='10' width='250' height='70' />\r\n    <rect x='85' y='122' rx='10' ry='10' width='100' height='18' />\r\n    <rect x='10' y='148' rx='10' ry='10' width='250' height='25' />\r\n  </ContentLoader>\r\n)\r\n\r\nexport default CurrentWeatherLoader\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledCurrentWeather = styled.div`\r\n  text-align: center;\r\n  max-width: 300px;\r\n  margin: 0px auto;\r\n  margin-top: 40px;\r\n  margin-bottom: 20px;\r\n  @media (max-width: 768px) {\r\n    margin-top: 15px;\r\n  }\r\n`\r\nexport const StyledLocation = styled.p`\r\n  font-size: 20px;\r\n`\r\n\r\nexport const StyledTemperature = styled.p`\r\n  font-size: 72px;\r\n  font-weight: 200;\r\n`\r\n\r\nexport const StyledWeatherIcon = styled.img`\r\n  object-fit: cover;\r\n  object-position: center;\r\n  width: 120px;\r\n  margin: -10px;\r\n`\r\n\r\nexport const StyledDescription = styled.p`\r\n  font-size: 20px;\r\n  margin-bottom: 15px;\r\n`\r\n\r\nexport const CurrentWeatherDetails = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 12px;\r\n  & span {\r\n    margin-right: 7px;\r\n  }\r\n  & span:last-child {\r\n    margin-right: 0px;\r\n  }\r\n`\r\nexport const FeelsLike = styled.div`\r\n  flex: 1 1 33%;\r\n  background: url(${(props) => props.icon}) center left no-repeat;\r\n  background-size: 25px;\r\n  padding-left: 20px;\r\n`\r\n\r\nexport const Wind = styled.div`\r\n  flex: 1 1 33%;\r\n  background: url(${(props) => props.icon}) center left no-repeat;\r\n  background-size: 25px;\r\n  padding-left: 20px;\r\n`\r\n\r\nexport const Visibility = styled.div`\r\n  flex: 1 1 33%;\r\n  background: url(${(props) => props.icon}) center left no-repeat;\r\n  background-size: 25px;\r\n  padding-left: 20px;\r\n`\r\n","export default __webpack_public_path__ + \"static/media/thermometer.922bfccc.svg\";","export default __webpack_public_path__ + \"static/media/wind.7e665b0a.svg\";","export default __webpack_public_path__ + \"static/media/witness.b6c0cb3a.svg\";","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Flex from '../../common/Flex'\r\nimport CurrentWeatherLoader from './CurrentWeatherLoader'\r\nimport {\r\n  CurrentWeatherDetails,\r\n  StyledCurrentWeather,\r\n  StyledDescription,\r\n  StyledLocation,\r\n  StyledTemperature,\r\n  StyledWeatherIcon,\r\n  FeelsLike,\r\n  Wind,\r\n  Visibility,\r\n} from './Styles'\r\n\r\nimport feelsLikeIcon from '../../assets/icons/thermometer.svg'\r\nimport windIcon from '../../assets/icons/wind.svg'\r\nimport visibilityIcon from '../../assets/icons/witness.svg'\r\n\r\nconst CurrentWeather = () => {\r\n  const {\r\n    country,\r\n    city,\r\n    description,\r\n    feelsLike,\r\n    icon,\r\n    temperature,\r\n    visibility,\r\n    wind,\r\n    isLoaded,\r\n  } = useSelector(({ currentWeather }) => currentWeather)\r\n\r\n  return (\r\n    <StyledCurrentWeather>\r\n      {isLoaded ? (\r\n        <>\r\n          <StyledLocation>\r\n            {city}, {country}\r\n          </StyledLocation>\r\n          <Flex align='center' justify='space-around'>\r\n            <StyledWeatherIcon\r\n              src={`http://openweathermap.org/img/wn/${icon}@4x.png`}\r\n              alt='weather icon'\r\n            />\r\n            <StyledTemperature>{Math.round(temperature)}°</StyledTemperature>\r\n          </Flex>\r\n          <StyledDescription>{description}</StyledDescription>\r\n          <CurrentWeatherDetails>\r\n            <FeelsLike icon={feelsLikeIcon}>\r\n              <div>Feels like</div> <div>{Math.round(feelsLike)}°</div>\r\n            </FeelsLike>\r\n            <Wind icon={windIcon}>\r\n              <div>Wind</div> {Math.round(wind)} km\\h\r\n            </Wind>\r\n            <Visibility icon={visibilityIcon}>\r\n              <div>Visibility</div> {visibility / 1000} km\r\n            </Visibility>\r\n          </CurrentWeatherDetails>\r\n        </>\r\n      ) : (\r\n        <CurrentWeatherLoader />\r\n      )}\r\n    </StyledCurrentWeather>\r\n  )\r\n}\r\n\r\nexport default CurrentWeather\r\n","export const actions = {\r\n  GET_DAILY_WEATHER: 'GET_DAILY_WEATHER',\r\n  GET_DAILY_WEATHER_SUCCESS: ' GET_DAILY_WEATHER_SUCCESS',\r\n  GET_DAILY_WEATHER_ERROR: ' GET_DAILY_WEATHER_ERROR',\r\n  SET_ACTIVE_DAY: 'SET_ACTIVE_DAY',\r\n  SET_COORDS_BY_SEARCH: 'SET_COORDS_BY_SEARCH',\r\n}\r\n","import { actions } from '../actions/dailyWeather'\r\n\r\nexport const getDailyWeatherRequest = (payload) => ({\r\n  type: actions.GET_DAILY_WEATHER,\r\n  payload,\r\n})\r\n\r\nexport const getDailyWeatherSuccess = (payload) => ({\r\n  type: actions.GET_DAILY_WEATHER_SUCCESS,\r\n  payload,\r\n})\r\n\r\nexport const getDailyWeatherError = (payload) => ({\r\n  type: actions.GET_DAILY_WEATHER_ERROR,\r\n  payload,\r\n})\r\n\r\nexport const setActiveDay = (payload) => ({\r\n  type: actions.SET_ACTIVE_DAY,\r\n  payload,\r\n})\r\n\r\nexport const setCoordsBySearch = (payload) => {\r\n  return {\r\n    type: actions.SET_COORDS_BY_SEARCH,\r\n    payload,\r\n  }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledDayForecast = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 10px 15px 10px 10px;\r\n  min-width: 95px;\r\n  width: 120px;\r\n  cursor: pointer;\r\n  border-radius: 10px;\r\n  &:hover {\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n  }\r\n  &.active {\r\n    background-color: rgba(255, 255, 255, 0.3);\r\n    position: relative;\r\n    &::after {\r\n      content: '';\r\n      position: absolute;\r\n      bottom: -20px;\r\n      left: calc(50% - 13px);\r\n      border: 13px solid transparent;\r\n      border-top: 7px solid rgba(255, 255, 255, 0.3);\r\n    }\r\n  }\r\n  transition: 0.1s backround-color all;\r\n\r\n  margin: 0px;\r\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n\r\n  @media (max-width: 768px) {\r\n    width: 80px;\r\n    padding: 5px;\r\n  }\r\n`\r\nexport const StyledDate = styled.p`\r\n  font-size: 16px;\r\n  margin-bottom: 10px;\r\n`\r\n\r\nexport const StyledImage = styled.img`\r\n  object-fit: cover;\r\n  object-position: center;\r\n  width: 70px;\r\n  height: 70px;\r\n  margin: -10px 0px -10px -15px;\r\n`\r\n\r\nexport const StyledTemperature = styled.p`\r\n  font-size: 24px;\r\n  margin-top: 10px;\r\n  & span {\r\n    font-size: 14px;\r\n    color: rgba(255, 255, 255, 0.5);\r\n  }\r\n  margin-bottom: 10px;\r\n`\r\nexport const StyledDescription = styled.p`\r\n  text-align: center;\r\n`\r\n","import React from 'react'\r\nimport {\r\n  StyledDate,\r\n  StyledDayForecast,\r\n  StyledDescription,\r\n  StyledImage,\r\n  StyledTemperature,\r\n} from './Styles'\r\n\r\nfunction DayForecast({\r\n  active,\r\n  date,\r\n  icon,\r\n  maxTemp,\r\n  minTemp,\r\n  description,\r\n  onDayClick,\r\n}) {\r\n  const onClickHandler = () => onDayClick()\r\n\r\n  return (\r\n    <StyledDayForecast\r\n      className={active ? 'active' : ''}\r\n      onClick={onClickHandler}>\r\n      <StyledDate>\r\n        {date[0]} {date[2]}\r\n      </StyledDate>\r\n      <StyledImage src={icon}></StyledImage>\r\n      <StyledTemperature>\r\n        {maxTemp}° <span> {minTemp}°</span>\r\n      </StyledTemperature>\r\n      <StyledDescription>{description}</StyledDescription>\r\n    </StyledDayForecast>\r\n  )\r\n}\r\n\r\nexport default DayForecast\r\n","import React from 'react'\r\nimport ContentLoader from 'react-content-loader'\r\n\r\nconst DayForecastLoader = (props) => (\r\n  <ContentLoader\r\n    speed={2}\r\n    width={145}\r\n    height={175}\r\n    viewBox='0 0 145 175'\r\n    backgroundColor='rgba(255, 255, 255, 0.2)'\r\n    foregroundColor='rgba(255, 255, 255, 0.4)'\r\n    style={{ flex: '0 0 135px' }}\r\n    {...props}>\r\n    <rect x='0' y='0' rx='10' ry='10' width='100' height='20' />\r\n    <rect x='0' y='30' rx='10' ry='10' width='120' height='110' />\r\n    <rect x='0' y='150' rx='10' ry='10' width='120' height='20' />\r\n  </ContentLoader>\r\n)\r\n\r\nexport default DayForecastLoader\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDailyForecast = styled.div`\r\n  max-width: 1000px;\r\n  overflow-y: hidden;\r\n  scrollbar-width: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  margin: 0px auto;\r\n`;\r\nexport const StyledTitle = styled.h2`\r\n  font-size: 18px;\r\n`;\r\n\r\nexport const StyledWrapper = styled.div`\r\n  overflow-y: hidden;\r\n  scrollbar-width: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  padding: 2px 2px 10px 0px;\r\n`;\r\n","import React, { memo, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Flex from '../../common/Flex'\r\nimport { getDailyWeatherRequest } from '../../redux/actionCreators/dailyWeather'\r\nimport { setActiveDay } from '../../redux/actionCreators/dailyWeather'\r\nimport DayForecast from './DayForecast/DayForecast'\r\nimport DayForecastLoader from './DayForecast/DayForecastLoader'\r\nimport { StyledDailyForecast, StyledTitle, StyledWrapper } from './Styles'\r\n\r\nconst DailyForecast = memo(() => {\r\n  const dispatch = useDispatch()\r\n\r\n  const onDayClickHandler = (day) => (_event) =>\r\n    dispatch(setActiveDay(new Date(day.dt * 1000).toDateString()))\r\n\r\n  const days = useSelector(({ dailyWeather }) => dailyWeather.days)\r\n  const activeDay = useSelector(\r\n    ({ dailyWeather }) => dailyWeather.activeDay.date\r\n  )\r\n  const isLoaded = useSelector(({ dailyWeather }) => dailyWeather.isLoaded)\r\n\r\n  const latBySearch = useSelector(({ dailyWeather: { coords } }) => coords.lat)\r\n  const lonBySearch = useSelector(({ dailyWeather: { coords } }) => coords.lon)\r\n\r\n  useEffect(() => {\r\n    if (\r\n      latBySearch &&\r\n      latBySearch !== null &&\r\n      lonBySearch &&\r\n      lonBySearch !== null\r\n    ) {\r\n      dispatch(getDailyWeatherRequest({ latBySearch, lonBySearch }))\r\n    }\r\n  }, [dispatch, latBySearch, lonBySearch])\r\n\r\n  return (\r\n    <StyledDailyForecast>\r\n      <StyledTitle>Daily</StyledTitle>\r\n      <StyledWrapper>\r\n        <Flex justify='space-between'>\r\n          {isLoaded\r\n            ? days?.slice(0, 5).map((day) => {\r\n                const isActive =\r\n                  activeDay === new Date(day.dt * 1000).toDateString()\r\n                return (\r\n                  <DayForecast\r\n                    onDayClick={onDayClickHandler(day)}\r\n                    active={isActive}\r\n                    date={new Date(day.dt * 1000).toDateString().split(' ')}\r\n                    icon={`http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`}\r\n                    maxTemp={Math.ceil(day.temp.max)}\r\n                    minTemp={Math.floor(day.temp.min)}\r\n                    description={day.weather[0].description}\r\n                    key={day.dt}\r\n                  />\r\n                )\r\n              })\r\n            : Array(5).fill(<DayForecastLoader />)}\r\n        </Flex>\r\n      </StyledWrapper>\r\n    </StyledDailyForecast>\r\n  )\r\n})\r\n\r\nexport default DailyForecast\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledHourlyForecast = styled.div`\r\n  margin-bottom: 25px;\r\n  overflow: hidden;\r\n`\r\n\r\nexport const StyledButtons = styled.h2`\r\n  margin-bottom: 25px;\r\n`\r\n\r\nexport const StyledButton = styled.button`\r\n  border: none;\r\n  background-color: ${({ active }) =>\r\n    active ? 'rgba(255, 255, 255, 0.4)' : 'rgba(255, 255, 255, 0.2)'};\r\n  padding: 5px;\r\n  height: 35px;\r\n  width: 100px;\r\n  border-radius: 10px;\r\n  font-size: 12px;\r\n  &:hover {\r\n    font-weight: 600;\r\n  }\r\n  cursor: pointer;\r\n  margin-right: 15px;\r\n  font-weight: ${({active}) => active ? 600 : 500};\r\n  color: #ffffff;\r\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n  outline: none;\r\n  text-transform: uppercase;\r\n  transition: 0.1s background-color all;\r\n`\r\nexport const StyledWrapper = styled.div`\r\n  overflow-y: hidden;\r\n  scrollbar-width: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nexport const StyledForecastLine = styled.div`\r\n  display: flex;\r\n  justify-content: ${({ isLoaded, justify }) =>\r\n    isLoaded ? justify : 'center'};\r\n`\r\n\r\nexport const StyledSubtitle = styled.p`\r\n  font-size: 18px;\r\n  margin: 20px 0px;\r\n`\r\n\r\nexport const GraphWrapper = styled.div`\r\n  min-height: 212px;\r\n`\r\n","import { defaults } from 'react-chartjs-2'\r\nimport { memo } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport { GraphWrapper } from '../Styles'\r\n\r\nconst Chart = memo((props) => {\r\n  defaults.color = 'rgba(255, 255, 255, 0.8)'\r\n  defaults.font.family = \"'Montserrat', 'sans-serif'\"\r\n  defaults.font.weight = 500\r\n\r\n  const data = {\r\n    labels: props.data.map((hour) =>\r\n      hour.time === '00'\r\n        ? '12 am'\r\n        : hour.time < 12\r\n        ? hour.time + ' am'\r\n        : hour.time + ' pm'\r\n    ),\r\n    scaleFontColor: '#ffffff',\r\n    datasets: [\r\n      {\r\n        label: 'temperature',\r\n        data: props.data.map((hour) => hour.temperature),\r\n        fill: true,\r\n        backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n        borderColor: 'rgba(255, 255, 255, 0.5)',\r\n      },\r\n    ],\r\n  }\r\n\r\n  const options = {\r\n    defaultFontColor: '#FFFFFF',\r\n    maintainAspectRatio: false,\r\n  }\r\n\r\n  return (\r\n    <GraphWrapper>\r\n      <Line data={data} options={options} width={1200} height={212}/>\r\n    </GraphWrapper>\r\n  )\r\n})\r\n\r\nexport default Chart\r\n","const convertTime = (ts) => new Date(ts * 1000).toTimeString().substring(0, 5)\r\n\r\nexport default convertTime\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledHourForecast = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 10px 10px 10px 5px;\r\n  min-width: 80px;\r\n  flex: 0 1 110px;\r\n  opacity: 0.3;\r\n  position: relative;\r\n  animation: 0.5s slidein forwards;\r\n  background-color: rgba(255, 255, 255, 0.07);\r\n  border-radius: 12px;\r\n  margin-right: 25px;\r\n\r\n  &:last-child{\r\n    margin-right: 0px;\r\n  }\r\n\r\n  @keyframes slidein {\r\n    100% {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`\r\n\r\nexport const StyledImage = styled.img`\r\n  object-fit: cover;\r\n  object-position: center;\r\n  width: 70px;\r\n  height: 70px;\r\n  margin: -15px 0px -12px 0px;\r\n`\r\n\r\nexport const StyledTemperature = styled.p`\r\n  font-size: 20px;\r\n  margin-bottom: 7px;\r\n`\r\n\r\nexport const StyledDescription = styled.p`\r\n  font-size: 14px;\r\n  margin-bottom: 10px;\r\n  min-height: 33px;\r\n  height: 45px;\r\n  max-width: 60px;\r\n  text-align: center;\r\n`\r\n\r\nexport const StyledPrecipitation = styled.p`\r\n  color: rgba(255, 255, 255, 0.7);\r\n  margin-bottom: 5px;\r\n  background: url(${(props) => props.icon}) left/cover no-repeat;\r\n  background-size: 16px;\r\n  padding-left: 22px;\r\n`\r\n\r\nexport const StyledWind = styled.p`\r\n  color: rgba(255, 255, 255, 0.7);\r\n  margin-bottom: 8px;\r\n  background: url(${(props) => props.icon}) left/cover no-repeat;\r\n  background-size: 18px;\r\n  padding-left: 22px;\r\n`\r\n\r\nexport const StyledTime = styled.p`\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n`\r\n","export default __webpack_public_path__ + \"static/media/humidity.5d5fdecd.svg\";","import React from 'react';\r\nimport {\r\n  StyledHourForecast,\r\n  StyledPrecipitation,\r\n  StyledTime,\r\n  StyledWind,\r\n  StyledDescription,\r\n  StyledTemperature,\r\n  StyledImage\r\n} from './Styles';\r\nimport humidityIcon from '../../../assets/icons/humidity.svg';\r\nimport windIcon from '../../../assets/icons/wind.svg';\r\n\r\nconst HourForecast = ({\r\n  icon,\r\n  temperature,\r\n  description,\r\n  precipitation,\r\n  wind,\r\n  time\r\n}) => {\r\n  return (\r\n    <StyledHourForecast>\r\n      <StyledImage src={icon}></StyledImage>\r\n      <StyledTemperature>{temperature}°</StyledTemperature>\r\n      <StyledDescription>{description}</StyledDescription>\r\n      <StyledPrecipitation icon={humidityIcon}>\r\n        {`${precipitation}%`}\r\n      </StyledPrecipitation>\r\n      <StyledWind icon={windIcon}>{`${wind} km/h`}</StyledWind>\r\n      <StyledTime>\r\n        {time === '00' ? '12' : time}\r\n        {time < 12 ? ' am' : ' pm'}\r\n      </StyledTime>\r\n    </StyledHourForecast>\r\n  );\r\n};\r\n\r\nexport default HourForecast;\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledDetails = styled.div`\r\n  min-height: 212px;\r\n`\r\n\r\nexport const StyledDescription = styled.p`\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n  margin-bottom: 3px;\r\n`\r\n\r\nexport const StyledSun = styled.div`\r\n  padding-top: 5px;\r\n  margin-right: 25px;\r\n  font-size: 24px;\r\n  line-height: 30px;\r\n  min-width: 130px;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 17px;\r\n    display: block;\r\n    margin-right: 10px;\r\n  }\r\n`\r\n\r\nexport const StyledMoon = styled.div`\r\n  padding-top: 5px;\r\n  font-size: 24px;\r\n  line-height: 30px;\r\n  min-width: 130px;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 17px;\r\n    display: block;\r\n  }\r\n`\r\n\r\nexport const StyledWeatherPeriod = styled.div`\r\n  padding-left: 43px;\r\n  background: ${({ backgroundUrl }) =>\r\n    backgroundUrl && `url(${backgroundUrl}) left/cover no-repeat`};\r\n  background-size: 32px;\r\n`\r\n\r\nexport const StyledSunrise = styled(StyledWeatherPeriod)`\r\n  margin: 5px 20px 15px 0px;\r\n`\r\nexport const StyledSunset = styled(StyledWeatherPeriod)`\r\n  margin: 5px 0px 15px 0px;\r\n`\r\nexport const StyledMoonrise = styled(StyledWeatherPeriod)`\r\n  margin: 5px 20px 15px 0px;\r\n`\r\nexport const StyledMoonset = styled(StyledWeatherPeriod)`\r\n  margin: 5px 0px 15px 0px;\r\n`\r\n","import { memo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport convertTime from '../../common/convertTime'\r\nimport Flex from '../../common/Flex'\r\nimport DetailsLoader from './DetailsLoader'\r\nimport {\r\n  StyledDetails,\r\n  StyledMoon,\r\n  StyledMoonrise,\r\n  StyledSun,\r\n  StyledSunrise,\r\n  StyledTitle,\r\n  StyledSunset,\r\n  StyledMoonset,\r\n  StyledDescription,\r\n} from './Styles'\r\n\r\nconst Details = memo((props) => {\r\n  const activeDay = useSelector(\r\n    ({ dailyWeather }) => dailyWeather.activeDay.date\r\n  )\r\n\r\n  const days = useSelector(({ dailyWeather }) => dailyWeather.days)\r\n  const day = days.filter(\r\n    (day) => new Date(day.dt * 1000).toDateString() === activeDay\r\n  )\r\n  const isLoaded = useSelector(({ currentWeather }) => currentWeather.isLoaded)\r\n\r\n  const sunset = convertTime(day[0]?.sunset)\r\n  const sunrise = convertTime(day[0]?.sunrise)\r\n  const moonset = convertTime(day[0]?.moonset)\r\n  const moonrise = convertTime(day[0]?.moonrise)\r\n\r\n  return (\r\n    <StyledDetails>\r\n      <Flex>\r\n        {isLoaded ? (\r\n          <StyledSun>\r\n            <StyledDescription>Sunrise</StyledDescription>\r\n            <StyledSunrise\r\n              backgroundUrl={\r\n                'https://image.flaticon.com/icons/png/512/728/728123.png'\r\n              }>\r\n              {sunrise} AM\r\n            </StyledSunrise>\r\n\r\n            <StyledDescription>Sunset</StyledDescription>\r\n            <StyledSunset\r\n              backgroundUrl={\r\n                'https://image.flaticon.com/icons/png/512/728/728124.png'\r\n              }>\r\n              {sunset} PM\r\n            </StyledSunset>\r\n          </StyledSun>\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        {isLoaded ? (\r\n          <StyledMoon>\r\n            <StyledDescription>Moonrise</StyledDescription>\r\n            <StyledMoonrise\r\n              backgroundUrl={\r\n                'https://image.flaticon.com/icons/png/512/728/728098.png'\r\n              }>\r\n              {moonrise} PM\r\n            </StyledMoonrise>\r\n\r\n            <StyledDescription>Moonset</StyledDescription>\r\n            <StyledMoonset\r\n              backgroundUrl={\r\n                'https://image.flaticon.com/icons/png/512/728/728099.png'\r\n              }>\r\n              {moonset} AM\r\n            </StyledMoonset>\r\n          </StyledMoon>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </Flex>\r\n    </StyledDetails>\r\n  )\r\n})\r\n\r\nexport default Details\r\n","import './styles.css'\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className='wrapper'>\r\n      <div className='lds-roller'>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import Chart from './Chart/Chart'\r\nimport React, { memo, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport convertTime from '../../common/convertTime'\r\nimport Flex from '../../common/Flex'\r\nimport HourForecast from './HourForecast/HourForecast'\r\nimport Details from '../Details/Details'\r\nimport {\r\n  StyledButton,\r\n  StyledHourlyForecast,\r\n  StyledSubtitle,\r\n  StyledButtons,\r\n  StyledWrapper,\r\n  StyledForecastLine,\r\n} from './Styles'\r\nimport Loader from '../../common/Loader/Loader'\r\n\r\nconst HourlyForecast = memo(() => {\r\n  const activeDay = useSelector((state) => state.dailyWeather.activeDay.date)\r\n\r\n  const isLoaded = useSelector((state) => state.hourlyWeather.isLoaded)\r\n\r\n  const hourlyForecast = useSelector((state) => state.hourlyWeather.hours)\r\n\r\n  const currentDayHourlyForecast = hourlyForecast.filter(\r\n    (hour) => new Date(hour.dt * 1000).toDateString() === activeDay\r\n  )\r\n\r\n  const [activeButton, setActiveButton] = useState('Hourly')\r\n\r\n  const onSummaryClick = () => setActiveButton('Summary')\r\n\r\n  const onHourlyClick = () => setActiveButton('Hourly')\r\n\r\n  const onDetailsClick = () => setActiveButton('Details')\r\n\r\n  return (\r\n    <StyledHourlyForecast>\r\n      <StyledButtons>\r\n      <Flex>\r\n        <StyledButton\r\n          active={activeButton === 'Hourly'}\r\n          onClick={onHourlyClick}>\r\n          Hourly\r\n        </StyledButton>\r\n        <StyledButton\r\n          active={activeButton === 'Summary'}\r\n          onClick={onSummaryClick}>\r\n          Summary\r\n        </StyledButton>\r\n        <StyledButton\r\n          active={activeButton === 'Details'}\r\n          onClick={onDetailsClick}>\r\n          Details\r\n        </StyledButton>\r\n      </Flex>\r\n      </StyledButtons>\r\n      <StyledWrapper>\r\n        {isLoaded ? (\r\n          currentDayHourlyForecast.length > 0 ? (\r\n            activeButton === 'Hourly' ? (\r\n              <StyledForecastLine\r\n                isLoaded={isLoaded}\r\n                justify={\r\n                  currentDayHourlyForecast.length < 6\r\n                    ? 'start'\r\n                    : 'space-between'\r\n                }>\r\n                {currentDayHourlyForecast.map((hour) => (\r\n                  <HourForecast\r\n                    icon={`http://openweathermap.org/img/wn/${hour.weather[0].icon}@2x.png`}\r\n                    temperature={Math.round(hour.main.temp)}\r\n                    description={hour.weather[0].description}\r\n                    precipitation={hour.main.humidity}\r\n                    wind={Math.round(hour.wind.speed)}\r\n                    time={convertTime(hour.dt).substring(0, 2)}\r\n                    key={hour.dt}\r\n                  />\r\n                ))}\r\n              </StyledForecastLine>\r\n            ) : activeButton === 'Summary' ? (\r\n              <Chart\r\n                data={currentDayHourlyForecast.map((hour) => ({\r\n                  time: convertTime(hour.dt).substring(0, 2),\r\n                  temperature: hour.main.temp,\r\n                }))}\r\n              />\r\n            ) : (\r\n              <Details />\r\n            )\r\n          ) : (\r\n            <StyledSubtitle>\r\n              Sorry, no weather for the next 3 hours\r\n            </StyledSubtitle>\r\n          )\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </StyledWrapper>\r\n    </StyledHourlyForecast>\r\n  )\r\n})\r\n\r\nexport default HourlyForecast\r\n","export const setPosition = (location) => {\r\n  return {\r\n    type: 'SET_POSITION',\r\n    payload: { ...location },\r\n  }\r\n}\r\n\r\nexport const getPosition = () => {\r\n  return (dispatch) => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) =>\r\n        dispatch(\r\n          setPosition({\r\n            lat: position.coords.latitude,\r\n            lon: position.coords.longitude,\r\n          })\r\n        ),\r\n      () => {\r\n        dispatch(\r\n          setPosition({\r\n            lat: 55.751244,\r\n            lon: 37.618423,\r\n          })\r\n        )\r\n      }\r\n    )\r\n  }\r\n}\r\n","export const actions = {\r\n  GET_CURRENT_WEATHER: 'GET_CURRENT_WEATHER',\r\n  GET_CURRENT_WEATHER_SUCCESS: 'GET_CURRENT_WEATHER_SUCCESS',\r\n  GET_CURRENT_WEATHER_ERROR: 'GET_CURRENT_WEATHER_ERROR'\r\n};\r\n","import { actions } from '../actions/currentWeather'\r\n\r\nexport const getCurrentWeatherRequest = (payload) => ({\r\n  type: actions.GET_CURRENT_WEATHER,\r\n  payload,\r\n})\r\n\r\nexport const getCurrentWeatherSuccess = (payload) => ({\r\n  type: actions.GET_CURRENT_WEATHER_SUCCESS,\r\n  payload,\r\n})\r\n\r\nexport const getCurrentWeatherError = () => ({\r\n  type: actions.GET_CURRENT_WEATHER_ERROR,\r\n})\r\n","import axios from 'axios'\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'https://api.openweathermap.org/data/2.5/',\r\n})\r\n\r\nconst API = {\r\n  getCurrentWeather: (lat, lon, city = null) => {\r\n    return axiosInstance\r\n      .get(\r\n        `weather?${\r\n          lat !== null && lon !== null ? 'lat=' + lat + `&lon=` + lon : ''\r\n        }${\r\n          city !== null ? `&q=` + city : ''\r\n        }&units=metric&appid=34f0fb637a40be39e56e907408b59746`\r\n      )\r\n      .then((response) => response.data)\r\n      .catch(() => 404)\r\n  },\r\n  getDailyWeather: (lat, lon) => {\r\n    return axiosInstance\r\n      .get(\r\n        `onecall?lat=${lat}&lon=${lon}&exclude=minutely,alerts,current&units=metric&appid=34f0fb637a40be39e56e907408b59746`\r\n      )\r\n      .then((response) => response.data)\r\n  },\r\n  getHourlyWeather: (lat, lon, city = null) => {\r\n    return axiosInstance\r\n      .get(\r\n        `forecast?${\r\n          lat !== null && lon !== null ? 'lat=' + lat + `&lon=` + lon : ''\r\n        }${\r\n          city !== null && city ? `q=` + city : ''\r\n        }&units=metric&appid=34f0fb637a40be39e56e907408b59746`\r\n      )\r\n      .then((response) => response.data)\r\n  },\r\n}\r\nexport default API\r\n","import API from '../../services/api';\r\n\r\nconst setHourlyWeather = (data) => {\r\n  return {\r\n    type: 'SET_HOURLY_WEATHER',\r\n    payload: {\r\n      hours: data\r\n    }\r\n  };\r\n};\r\n\r\nconst setLoad = (isLoaded) => {\r\n  return {\r\n    type: 'SET_LOAD',\r\n    payload: {\r\n      isLoaded\r\n    }\r\n  };\r\n};\r\n\r\nexport const getHourlyWeather = (lat, lon, city) => {\r\n  return (dispatch) => {\r\n    dispatch(setLoad(false));\r\n    API.getHourlyWeather(lat, lon, city).then((data) => {\r\n      dispatch(setHourlyWeather(data));\r\n    });\r\n    dispatch(setLoad(true));\r\n  };\r\n};\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledSearch = styled.input`\r\n  min-width: 250px;\r\n  max-width: 400px;\r\n  height: 25px;\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n  border: none;\r\n  outline: none;\r\n  color: #fff;\r\n  font-weigth: 500;\r\n  padding: 3px 10px;\r\n  background: url(${(props) => props.icon}) calc(100% - 15px) center no-repeat;\r\n  background-size: 17px;\r\n  border: 2px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 10px;\r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, 0.5);\r\n  }\r\n`\r\nexport const StyledSearchWrapper = styled.div`\r\n  text-align: center;\r\n`\r\nexport const StyledErrorMessage = styled.p`\r\n  font-size: 10px;\r\n  color: #ec6e4c;\r\n  margin-top: 4px;\r\n  margin-bottom: -15px;\r\n`\r\n","export default __webpack_public_path__ + \"static/media/search.d80850ce.svg\";","import { StyledErrorMessage, StyledSearch, StyledSearchWrapper } from './Styles'\r\nimport search from '../../assets/icons/search.svg'\r\nimport { useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setSearchCity } from '../../redux/actions/search'\r\n\r\nconst Search = () => {\r\n  const searchRef = useRef()\r\n  const [searchValue, setSearchValue] = useState('')\r\n  const dispatch = useDispatch()\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault()\r\n    setSearchValue('')\r\n    dispatch(setSearchCity(searchValue.trim()))\r\n  }\r\n  const onChangeHandler = () => {\r\n    setSearchValue(searchRef.current.value)\r\n  }\r\n  const error = useSelector((state) => state.currentWeather.error)\r\n\r\n  return (\r\n    <StyledSearchWrapper>\r\n      <form\r\n        onSubmit={(event) => {\r\n          onSubmitHandler(event)\r\n        }}>\r\n        <StyledSearch\r\n          ref={searchRef}\r\n          icon={search}\r\n          type={'text'}\r\n          onChange={onChangeHandler}\r\n          value={searchValue}\r\n          placeholder='Search for location'\r\n        />\r\n      </form>\r\n      {!error ? (\r\n        ''\r\n      ) : (\r\n        <StyledErrorMessage>\r\n          no results found\r\n        </StyledErrorMessage>\r\n      )}\r\n    </StyledSearchWrapper>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","export const setSearchCity = (searchCity) => {\r\n  return {\r\n    type: 'SET_SEARCH_CITY',\r\n    payload: {\r\n      searchCity,\r\n    },\r\n  }\r\n}\r\n\r\nexport const setResponse = (isResponseSuccessful) => {\r\n  return {\r\n    type: 'SET_RESPONSE',\r\n    payload: {\r\n      isResponseSuccessful,\r\n    },\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/background.faf3718a.jpg\";","import styled from 'styled-components'\r\nimport background from './assets/images/background.jpg'\r\n\r\nexport const Wrapper = styled.div`\r\n  min-height: 100vh;\r\n  overflow: hidden;\r\n  background: url(${background}) top/cover no-repeat;\r\n  padding: 0px 15px;\r\n`\r\n\r\nexport const Container = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 1200px;\r\n`\r\n","import { memo, useEffect } from 'react'\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux'\r\nimport CurrentWeather from './components/CurrentWeather/CurrentWeather'\r\nimport DailyForecast from './components/DailyForecast/DailyForecast'\r\nimport HourlyForecast from './components/HourlyForecast/HourlyForecast'\r\nimport { getPosition } from './redux/actions/position'\r\nimport { getCurrentWeatherRequest } from './redux/actionCreators/currentWeather'\r\nimport { getHourlyWeather } from './redux/actions/hourlyWeather'\r\nimport Search from './components/Search/Search'\r\nimport { Wrapper, Container } from './appStyle'\r\nimport { getDailyWeatherRequest } from './redux/actionCreators/dailyWeather'\r\n\r\nconst App = memo(() => {\r\n  const dispatch = useDispatch()\r\n\r\n  const { lat, lon } = useSelector((state) => state.position, shallowEqual)\r\n\r\n  const searchValue = useSelector((state) => state.search.searchCity)\r\n\r\n  const getWeatherByPosition = () => {\r\n    // refactored on redux-sagas\r\n    dispatch(getCurrentWeatherRequest({ lat, lon }))\r\n    dispatch(getDailyWeatherRequest({lat, lon}))\r\n    dispatch(getHourlyWeather(lat, lon))\r\n  }\r\n\r\n  const getWeatherBySearch = (searchValue) => {\r\n    dispatch(getCurrentWeatherRequest({ lat: null, lon: null, searchValue }))\r\n    dispatch(getHourlyWeather(null, null, searchValue))\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(getPosition())\r\n    if (lat && lon && searchValue === null) {\r\n      getWeatherByPosition()\r\n    }\r\n    if (searchValue !== null) {\r\n      getWeatherBySearch(searchValue)\r\n    }\r\n  })\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <CurrentWeather />\r\n        <Search />\r\n        <DailyForecast />\r\n        <HourlyForecast />\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n})\r\n\r\nexport default App\r\n","import { createGlobalStyle } from 'styled-components'\r\nimport normalize from 'styled-normalize'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  ${normalize}\r\n  body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    color: rgba(255, 255, 255, 0.8);\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n  }\r\n  p {\r\n    margin: 0;\r\n  }\r\n  input[type=\"text\"], textarea {\r\n    &:focus {\r\n      background-color: rgba(255, 255, 255, 0.1); \r\n    }\r\n    transition: 0.1s ease all;\r\n  }\r\n`\r\nexport default GlobalStyle\r\n","import { takeLatest, put, call } from 'redux-saga/effects'\r\nimport { actions } from '../actions/currentWeather'\r\nimport {\r\n  getCurrentWeatherSuccess,\r\n  getCurrentWeatherError,\r\n} from '../actionCreators/currentWeather'\r\nimport API from '../../services/api'\r\nimport { setCoordsBySearch } from '../actionCreators/dailyWeather'\r\n\r\nexport function* watchGetCurrentWeather() {\r\n  yield takeLatest(actions.GET_CURRENT_WEATHER, doGetCurrentWeather)\r\n}\r\n\r\nconst fetchCurrentWeather = ({ lat, lon, searchValue }) => {\r\n  return API.getCurrentWeather(lat, lon, searchValue)\r\n}\r\n\r\nfunction* doGetCurrentWeather(action) {\r\n  const { payload } = action\r\n\r\n  try {\r\n    const response = yield call(fetchCurrentWeather, payload)\r\n    yield put(getCurrentWeatherSuccess(response))\r\n    yield put(setCoordsBySearch(response.coord))\r\n  } catch ({ message }) {\r\n    yield put(getCurrentWeatherError())\r\n  }\r\n}\r\n","import { call, put, takeLatest } from 'redux-saga/effects'\r\nimport API from '../../services/api'\r\nimport {\r\n  getDailyWeatherError,\r\n  getDailyWeatherSuccess,\r\n} from '../actionCreators/dailyWeather'\r\nimport { actions } from '../actions/dailyWeather'\r\n\r\nexport function* watchGetDailyWeather() {\r\n  yield takeLatest(actions.GET_DAILY_WEATHER, doGetDailyWeather)\r\n}\r\n\r\nconst fetchDailyWeather = ({ lat, lon, searchValue }) => {\r\n  return API.getDailyWeather(lat, lon, searchValue)\r\n}\r\n\r\nfunction* doGetDailyWeather(action) {\r\n  const { payload } = action\r\n  try {\r\n    const response = yield call(fetchDailyWeather, {\r\n      lat: payload.lat || payload.latBySearch,\r\n      lon: payload.lon || payload.lonBySearch,\r\n    })\r\n    yield put(getDailyWeatherSuccess(response))\r\n  } catch {\r\n    yield put(getDailyWeatherError())\r\n  }\r\n}\r\n","import { all } from 'redux-saga/effects';\r\nimport { watchGetCurrentWeather } from './currentWeatherSaga';\r\nimport { watchGetDailyWeather } from './dailyWeatherSaga';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([watchGetCurrentWeather(), watchGetDailyWeather()]); // [watchSome1(), watchSome2()]\r\n}\r\n","import { actions } from '../actions/currentWeather'\r\n\r\nconst initialState = {\r\n  country: null,\r\n  city: null,\r\n  temperature: null,\r\n  icon: null,\r\n  description: null,\r\n  feelsLike: null,\r\n  wind: null,\r\n  visibility: null,\r\n  isLoaded: false,\r\n  error: false,\r\n}\r\n\r\nconst CurrentWeather = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case actions.GET_CURRENT_WEATHER: {\r\n      return {\r\n        ...state,\r\n        isLoaded: false,\r\n      }\r\n    }\r\n\r\n    case actions.GET_CURRENT_WEATHER_SUCCESS: {\r\n      // return state.set(...state).set('isCurrentWeatherLoaded', true); // попробуй реализовать через state.set или state.update\r\n\r\n      return {\r\n        ...state,\r\n        country: payload.sys.country,\r\n        city: payload.name,\r\n        temperature: payload.main.temp,\r\n        icon: payload.weather[0].icon,\r\n        description: payload.weather[0].description,\r\n        feelsLike: payload.main.feels_like,\r\n        wind: payload.wind.speed,\r\n        visibility: payload.visibility,\r\n        error: false,\r\n        isLoaded: true,\r\n      }\r\n    }\r\n\r\n    case actions.GET_CURRENT_WEATHER_ERROR: {\r\n      // return state.set('isCurrentWeatherLoaded', false);\r\n      // return { isCurrentWeatherLoaded: false };\r\n\r\n      return { ...state, isLoaded: true, error: true }\r\n    }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default CurrentWeather\r\n","const initialState = {\r\n  lat: null,\r\n  lon: null,\r\n}\r\n\r\nconst Position = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case 'SET_POSITION':\r\n      return {\r\n        ...state,\r\n        lat: payload.lat,\r\n        lon: payload.lon,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default Position\r\n","import { actions } from '../actions/dailyWeather'\r\n\r\nconst initialState = {\r\n  days: [],\r\n  activeDay: {\r\n    date: new Date().toDateString(),\r\n  },\r\n  coords: {\r\n    lat: null,\r\n    lon: null,\r\n  },\r\n  isLoaded: false,\r\n  error: false,\r\n}\r\n\r\nconst DailyWeather = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case actions.GET_DAILY_WEATHER:\r\n      return {\r\n        ...state,\r\n        isLoaded: false,\r\n      }\r\n    case actions.GET_DAILY_WEATHER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        days: [...payload.daily],\r\n        error: false,\r\n        isLoaded: true,\r\n      }\r\n    case actions.GET_DAILY_WEATHER_ERROR:\r\n      return {\r\n        ...state,\r\n        isLoaded: true,\r\n        error: true,\r\n      }\r\n    case actions.SET_ACTIVE_DAY:\r\n      return {\r\n        ...state,\r\n        activeDay: {\r\n          date: payload,\r\n        },\r\n      }\r\n    case actions.SET_COORDS_BY_SEARCH: {\r\n      return {\r\n        ...state,\r\n        coords: {\r\n          lat: payload.lat,\r\n          lon: payload.lon,\r\n        },\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default DailyWeather\r\n","const initialState = {\r\n  hours: [],\r\n  isLoaded: false\r\n};\r\n\r\nconst HourlyWeather = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case 'SET_HOURLY_WEATHER':\r\n      return {\r\n        ...state,\r\n        hours: payload.hours.list\r\n      };\r\n    case 'SET_LOAD':\r\n      return {\r\n        ...state,\r\n        isLoaded: payload.isLoaded\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default HourlyWeather;\r\n","const initialState = {\r\n  searchCity: null,\r\n}\r\n\r\nconst search = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case 'SET_SEARCH_CITY':\r\n      return {\r\n        ...state,\r\n        searchCity: payload.searchCity,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default search\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './sagas/';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport currentWeather from './reducers/currentWeather';\r\nimport position from './reducers/position';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport dailyWeather from './reducers/dailyWeather';\r\nimport hourlyWeather from './reducers/hourlyWeather';\r\nimport search from './reducers/search';\r\n\r\nconst reducers = combineReducers({\r\n  currentWeather,\r\n  position,\r\n  dailyWeather,\r\n  hourlyWeather,\r\n  search\r\n});\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middleware = [sagaMiddleware, ReduxThunk];\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport App from './App'\r\nimport GlobalStyle from './globalStyle'\r\nimport store from './redux/store'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <GlobalStyle />\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}